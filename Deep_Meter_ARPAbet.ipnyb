{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Deep_Meter_ARPAbet.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "metadata": {
        "colab_type": "text",
        "id": "co7MV6sX7Xto"
      },
      "cell_type": "markdown",
      "source": [
        "# [Keras + Universal Sentence Encoder = Deep Meter] (https://www.dlology.com/blog/keras-meets-universal-sentence-encoder-transfer-learning-for-text-data/) "
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "eAVQGidpL8v5"
      },
      "cell_type": "markdown",
      "source": [
        "This notebook creates an autoencoder using the Universal Sentence Encoder. The autoencoder output is CMUdict syllables. The dataset is that subset of Allison Parrish's Project Gutenberg poetry archive which happens to scan in iambic pentameter.\n",
        "\n",
        "The notebook is based on Chengwei Zhang's example of wrapping the USE inside a larger tensorflow model saves to a Keras model (without save the USE itself in the TF model).\n",
        "\n",
        "The Universal Sentence Encoder makes getting sentence level embeddings as easy as it has historically been to lookup the embeddings for individual words. The sentence embeddings can then be trivially used to compute sentence level meaning similarity as well as to enable better performance on downstream classification tasks using less supervised training data.\n",
        "\n",
        "Since there are 10 one-hot values for 10 sets of 6k syllables, this is \"multi-label classification\"\n",
        "Changes for multi-label classification:\n",
        "sigmoid activation instead of softmax\n",
        "binary_crossentropy\n",
        "\n",
        "Text format is tab-separated, 2 columns: first text, second multi-level\n",
        "array of syllables:\n",
        "\n",
        "Multi-output version\n",
        "\n",
        "Use ARPAbet directly instead of syllables"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "pOTzp8O36CyQ"
      },
      "cell_type": "markdown",
      "source": [
        "# Getting Started\n",
        "\n",
        "This section sets up the environment for access to the Universal Sentence Encoder on TF Hub and provides examples of applying the encoder to words, sentences, and paragraphs."
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "lVjNK8shFKOC",
        "outputId": "bbe5668a-ba46-4188-b767-65474a259181",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        }
      },
      "cell_type": "code",
      "source": [
        "# Install the latest Tensorflow version.\n",
        "#!pip3 install --quiet \"tensorflow>=1.7\"\n",
        "# Install TF-Hub.\n",
        "#!pip3 install --quiet tensorflow-hub\n",
        "#%cd /content\n",
        "!git clone https://github.com/LanceNorskog/deep_meter || true\n",
        "%cd /content/deep_meter\n",
        "!git pull\n",
        "# could not figure out how to read gzipped files as text!\n",
        "!gunzip -qf blobs/*.gz || true\n",
        "!gunzip -qf prepped_data/*.gz || true"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "fatal: destination path 'deep_meter' already exists and is not an empty directory.\n",
            "/content/deep_meter\n",
            "Already up to date.\n",
            "gzip: blobs/*.gz: No such file or directory\n",
            "gzip: prepped_data/*.gz: No such file or directory\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "MSeY-MUQo2Ha",
        "outputId": "6b8a8123-cd84-4e10-b75c-fd21768bbcbc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# boilerplate from base notebook\n",
        "import tensorflow as tf\n",
        "import tensorflow_hub as hub\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import os\n",
        "import pandas as pd\n",
        "import re\n",
        "import seaborn as sns\n",
        "import keras.layers as layers\n",
        "from keras.models import Model\n",
        "from keras import backend as K\n",
        "from keras.callbacks import EarlyStopping, ModelCheckpoint\n",
        "from tensorflow.keras.optimizers import Nadam, Adam\n",
        "np.random.seed(10)"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Using TensorFlow backend.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "feBc_8Y-pt6F",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# github deep_meter code\n",
        "import utils\n",
        "# should not need this to use utils.flatten but is true anyway?\n",
        "from itertools import chain, product\n",
        "import subprocess\n",
        "import arpabets\n",
        "import decodewords\n",
        "import cmudict\n",
        "# misc for this notebook\n",
        "from ast import literal_eval\n",
        "\n",
        "import scipy\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "zwty8Z6mAkdV",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "module_url = \"https://tfhub.dev/google/universal-sentence-encoder-large/3\" #@param [\"https://tfhub.dev/google/universal-sentence-encoder/2\", \"https://tfhub.dev/google/universal-sentence-encoder-large/3\"]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "Q8F4LNGFqOiq",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Import the Universal Sentence Encoder's TF Hub module\n",
        "#embed = hub.Module(module_url)\n",
        "#embed_size = embed.get_output_info_dict()['default'].get_shape()[1].value"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "FwAQNy1eMDkQ",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# read classified poetry lines: text tab [['syll', 'la', 'ble'], ...]\n",
        "# clip to only most common syllables with syllable manager\n",
        "# ['words', ...], [[[0,0,1,0], ...]]\n",
        "def get_data(filename, arpabet_mgr, num_symbols):\n",
        "    stop_arpabet = 0\n",
        "    num_arpabets = arpabet_mgr.get_size()      \n",
        "    lines = open(filename, 'r').read().splitlines()\n",
        "    num_lines = len(lines)\n",
        "    num_lines = 50000\n",
        "    text_lines = []\n",
        "    text_arpabets = []\n",
        "    for i in range(0, len(lines)):\n",
        "      if i == num_lines:\n",
        "        break\n",
        "      parts = lines[i].split(\"\\t\")\n",
        "      syllables = literal_eval(parts[1])\n",
        "      #print(syllables)\n",
        "      arpas = []\n",
        "      for s in syllables:\n",
        "        for p in s:\n",
        "          for x in p.split(' '):\n",
        "            arpas.append(x)\n",
        "      #print(arpas)\n",
        "      if len(arpas) < num_symbols:\n",
        "        text_lines.append(str(parts[0]))\n",
        "        text_arpabets.append(arpas)\n",
        "    num_lines = len(text_lines)\n",
        "    label_array = np.zeros((num_symbols, num_lines, num_arpabets), dtype=np.int8)\n",
        "    for i in range(0, num_lines):\n",
        "      for j in range(num_symbols):\n",
        "        label_array[j][i][stop_arpabet] = 1\n",
        "        # variable-length list of syllables\n",
        "        if j < len(text_arpabets[i]):\n",
        "          enc = arpabet_mgr.get_encoding(text_arpabets[i][j])\n",
        "          if enc >= 0 and enc < num_arpabets:\n",
        "            label_array[j][i][enc] = 1\n",
        "            label_array[j][i][stop_arpabet] = 0\n",
        "\n",
        "    return (text_lines, label_array)\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "3HAtd4X5DayF",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "outputId": "44f00b0f-dfeb-4719-8b1a-bad724e2f6ed"
      },
      "cell_type": "code",
      "source": [
        "# arpabets in descending order of occurrence - \n",
        "# ARPAbet phonemes + stop + pause\n",
        "# iambic pentameter\n",
        "meter_syllables = 10\n",
        "num_symbols = 4 * meter_syllables\n",
        "arpabets_mgr = arpabets.arpabets()\n",
        "num_arpabets = arpabets_mgr.get_size() \n",
        "arpabets_weights = {}\n",
        "counts = arpabets_mgr.get_counts()\n",
        "maxim = np.max(counts)\n",
        "for i in range(len(counts)):\n",
        "  if counts[i] > 0:\n",
        "    arpabets_weights[i] = 1/(counts[i]/maxim)\n",
        "  else:\n",
        "    arpabets_weights[i] = 0\n",
        "\n",
        "print(arpabets_weights)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{0: 0, 1: 0, 2: 1.0, 3: 1.2445861272947125, 4: 1.5197315436241612, 5: 1.5209564750134337, 6: 1.5881610324028617, 7: 1.7561656584457885, 8: 1.8720238095238095, 9: 2.0694571376348017, 10: 2.2044392523364484, 11: 2.43745963401507, 12: 2.8447236180904523, 13: 3.42571860816944, 14: 3.814690026954178, 15: 3.8510204081632655, 16: 3.9810126582278484, 17: 4.132116788321168, 18: 4.1701657458563535, 19: 4.319725295688668, 20: 4.45748031496063, 21: 4.933333333333333, 22: 4.95059029296021, 23: 4.959264126149803, 24: 5.501457725947522, 25: 5.588351431391906, 26: 5.788343558282208, 27: 5.827071538857437, 28: 5.918452692106639, 29: 7.409685863874346, 30: 7.797520661157026, 31: 9.819601040763226, 32: 15.055851063829786, 33: 15.197315436241611, 34: 16.923766816143498, 35: 19.42024013722127, 36: 20.003533568904594, 37: 25.328859060402685, 38: 34.94444444444444, 39: 59.904761904761905, 40: 205.85454545454544}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "eN9aqig-QpDZ",
        "outputId": "ae62588d-4d2d-419d-a46e-fd10a06dd8de",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "cell_type": "code",
      "source": [
        "(train_text, train_label) = get_data('prepped_data/gutenberg.iambic_pentameter.train', arpabets_mgr, num_symbols)\n",
        "print(len(train_text))\n",
        "print(train_label.shape)\n",
        "\n",
        "(test_text, test_label) = get_data('prepped_data/gutenberg.iambic_pentameter.test', arpabets_mgr, num_symbols)\n",
        "print(len(test_text))\n",
        "print(test_label.shape)"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "50000\n",
            "(40, 50000, 41)\n",
            "4474\n",
            "(40, 4474, 41)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Sf9A4Xl6J7c6"
      },
      "cell_type": "markdown",
      "source": [
        "## Embed training & test text"
      ]
    },
    {
      "metadata": {
        "id": "mbJCx9vzwrF9",
        "colab_type": "code",
        "outputId": "227cecc7-2399-41c8-cbe2-9d8b9009db9a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "cell_type": "code",
      "source": [
        "# Import the Universal Sentence Encoder's TF Hub module\n",
        "embed = hub.Module(module_url)\n",
        "# important?\n",
        "embed_size = embed.get_output_info_dict()['default'].get_shape()[1].value\n",
        "\n",
        "# Reduce logging output.\n",
        "tf.logging.set_verbosity(tf.logging.ERROR)\n",
        "print(type(train_text))\n",
        "#train_text_t = tf.convert_to_tensor(train_text, dtype='string', name='training_text')\n",
        "with tf.Session() as session:\n",
        "  session.run([tf.global_variables_initializer(), tf.tables_initializer()])\n",
        "  train_embeddings = session.run(embed(train_text))\n",
        "  test_embeddings = session.run(embed(test_text))\n",
        "train_text_d = np.array(train_embeddings)\n",
        "test_text_d = np.array(test_embeddings)\n",
        "print(train_text_d.shape)\n",
        "print(test_text_d.shape)\n",
        "# conserve space\n",
        "embed = None\n",
        "train_text = None\n",
        "train_embeddings = None"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO:tensorflow:Using /tmp/tfhub_modules to cache modules.\n",
            "<class 'list'>\n",
            "(50000, 512)\n",
            "(4474, 512)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "-mQUV_7dIm-9",
        "outputId": "b8cee428-cd66-47a2-f395-7269852f2db9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "print(test_text_d.shape)\n",
        "# slow\n",
        "num_epochs = 20\n",
        "adam_0001 = Adam(0.001)\n",
        "adam_0001 = tf.contrib.opt.NadamOptimizer(0.001)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(4474, 512)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "qX2rBOuxDP1m"
      },
      "cell_type": "markdown",
      "source": [
        "## Assemble model"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "t3fllZkVjXKV",
        "outputId": "7958116b-bd4d-4141-b686-f3c9cc683d69",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1598
        }
      },
      "cell_type": "code",
      "source": [
        "dropout=0.5\n",
        "input_embeddings = layers.Input(shape=(512,), dtype=tf.float32, name='Input')\n",
        "dropout_input = layers.Dropout(dropout)(input_embeddings)\n",
        "dense = layers.Dense(1024, activation='relu', name='Convoluted')(dropout_input)\n",
        "dense = layers.Dropout(dropout)(input_embeddings)\n",
        "dense = layers.Dense(2048, activation='relu', name='Midway')(dense)\n",
        "#dense = layers.Dropout(dropout)(input_embeddings)\n",
        "#dense = layers.Dense(4096, activation='relu', name='Smooth')(dense)\n",
        "pred_array = []\n",
        "loss_array = []\n",
        "names_array = []\n",
        "for i in range(num_symbols):\n",
        "  name = 'Flatout'+\"{:0>2d}\".format(i)\n",
        "  pred_array.append(layers.Dense(num_arpabets, activation='softmax', name=name)(dense))\n",
        "  loss_array.append('categorical_crossentropy')\n",
        "  names_array.append(name)\n",
        "model = Model(inputs=input_embeddings, outputs=pred_array)\n",
        "model.compile(loss=loss_array, \n",
        "              optimizer=adam_0001, \n",
        "              metrics=['categorical_accuracy'])\n",
        "model.summary()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "Input (InputLayer)              (None, 512)          0                                            \n",
            "__________________________________________________________________________________________________\n",
            "dropout_2 (Dropout)             (None, 512)          0           Input[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "Midway (Dense)                  (None, 2048)         1050624     dropout_2[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "Flatout00 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout01 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout02 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout03 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout04 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout05 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout06 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout07 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout08 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout09 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout10 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout11 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout12 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout13 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout14 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout15 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout16 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout17 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout18 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout19 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout20 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout21 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout22 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout23 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout24 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout25 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout26 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout27 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout28 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout29 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout30 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout31 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout32 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout33 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout34 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout35 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout36 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout37 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout38 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "Flatout39 (Dense)               (None, 41)           84009       Midway[0][0]                     \n",
            "==================================================================================================\n",
            "Total params: 4,410,984\n",
            "Trainable params: 4,410,984\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "bqcRy_JWXe0u"
      },
      "cell_type": "markdown",
      "source": [
        "## Train Keras model and save weights\n",
        "This only trains and save our Keras layers not the embed module' weights."
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "_stfC_7VFhS8",
        "outputId": "f9f2372b-b07e-4ad0-cd75-fe344ef8c234",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "use_saved_model=True\n",
        "\n",
        "print(train_label.shape)\n",
        "if not use_saved_model or not os.path.exists('./model.h5'):\n",
        "  with tf.Session() as session:\n",
        "    K.set_session(session)\n",
        "    session.run(tf.global_variables_initializer())\n",
        "    session.run(tf.tables_initializer())\n",
        "    train_labels = []\n",
        "    test_labels = []\n",
        "    for i in range(num_symbols):\n",
        "        train_labels.append(np.array(train_label[i]))\n",
        "        test_labels.append(np.array(test_label[i]))\n",
        "    history = model.fit(train_text_d, \n",
        "            train_labels,\n",
        "            validation_data=(test_text_d, test_labels),\n",
        "            epochs=num_epochs,\n",
        "            #callbacks = [EarlyStopping(patience=2)],\n",
        "            batch_size=32,\n",
        "            class_weight=arpabets_weights,\n",
        "            verbose=2\n",
        "            )\n",
        "    model.save_weights('./model.h5')\n"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(40, 50000, 41)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "UW1CiBhnXnxa",
        "outputId": "0dc8a0c3-782c-4f63-fedb-da0e59a56415",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "!ls -alh | grep model.h5"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "-rw-r--r-- 1 root root  17M Nov  6 05:20 model.h5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "nQux6qLdXabG"
      },
      "cell_type": "markdown",
      "source": [
        "## Make predictions"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "fSDxetlfUEiD",
        "outputId": "c583fc3c-bac0-42df-8314-222234e2f951",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "cell_type": "code",
      "source": [
        "\n",
        "#new_text = np.array(new_text, dtype=object)[:, np.newaxis]\n",
        "with tf.Session() as session:\n",
        "  K.set_session(session)\n",
        "  session.run(tf.global_variables_initializer())\n",
        "  session.run(tf.tables_initializer())\n",
        "  model.load_weights('./model.h5')  \n",
        "  predicts = model.predict(test_text_d, batch_size=32)\n",
        "\n",
        "print(len(predicts))\n",
        "print(predicts[0].shape)"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "40\n",
            "(4474, 41)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "xaR0d5VPU23Z",
        "outputId": "f0011e22-4241-4efb-c9b6-ca2bc5b47acd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 88
        }
      },
      "cell_type": "code",
      "source": [
        "for i in range(10,11):\n",
        "  print(test_text[i])\n",
        "  #syll_mgr.interpret2(predicts[i])\n",
        "  pred = []\n",
        "  for j in range(num_symbols):\n",
        "    pred.append(predicts[j][i])\n",
        "  (x, y) = arpabets_mgr.interpret2(utils.flatten(pred))\n",
        "  print(str(y))\n",
        "  print('')"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Of humble seeming: and, behind them all,\n",
            "['AH', 'V', 'N', 'AH', 'M', 'IH', 'NG', 'L', 'L', 'DH', 'DH', 'AH', 'D', 'N', 'N', 'IH', 'AH', 'DH', 'AH', 'AH', 'AH', 'D', 'M', 'S', 'N', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "afh7IcHATglZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "8e95186c-fc0b-4d87-ce30-b27e1c0aa9f2"
      },
      "cell_type": "code",
      "source": [
        "# Collect possible phonemes from each output model\n",
        "# [num_lines][num_symbols][N > 0.8]\n",
        "num_tests = 2\n",
        "arpabets = [[]] * num_tests\n",
        "scores = [[]] * num_tests\n",
        "for j in range(num_tests):\n",
        "    arpabets[j] = [[]] * num_symbols\n",
        "    scores[j] = [[]] * num_symbols\n",
        "    for i in range(num_symbols):\n",
        "      arpabets[j][i] = []\n",
        "      scores[j][i] = []\n",
        "\n",
        "sum = 0\n",
        "count = 0\n",
        "for i in range(num_symbols):\n",
        "  for j in range(num_tests):\n",
        "    for k in range(num_arpabets):\n",
        "      if predicts[i][j][k] > 0.05:\n",
        "        #print(\"i, j {0},{1}\".format(i,j))\n",
        "        arpabets[j][i].append(arpabets_mgr.get_arpabet(k))\n",
        "        scores[j][i].append(predicts[i][j][k])\n",
        "    sum += len(scores[j][i])\n",
        "    count += 1\n",
        "print(\"Mean length = {0}\".format(sum/count))\n",
        "    "
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mean length = 4.125\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "x8cHyrYFzTfP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 275
        },
        "outputId": "b5f3aba6-5089-479e-929a-e3e35c8fe168"
      },
      "cell_type": "code",
      "source": [
        "\n",
        "#for i in range(num_symbols):\n",
        "#  print(len(arpabets[i][0]))\n",
        "        \n",
        "  \n",
        "print(\"Arpabets[0]: {0}\".format(arpabets[1]))\n",
        "print(\"Scores[0]: {0}\".format(scores[1]))\n",
        "\n",
        "#sample =  [['AE'], ['N'], ['D'], ['W'], ['AH', 'EH'], ['N', 'T', 'DH']]\n",
        "##for x in product(*sample):\n",
        "#  print(x)\n",
        "\n",
        "decoder = decodewords.Decoder(cmudict.CMUDict().get_reverse_dict(), arpabets_mgr)\n",
        "for i in range(0,num_tests):\n",
        "  alist = []\n",
        "  slist = []\n",
        "  print(scores[i])\n",
        "  for s in product(*scores[i]):\n",
        "    #print(s)\n",
        "    slist.append(s)\n",
        "    break\n",
        "  stotals = [1.0] * len(slist)\n",
        "  for i in range(len(slist)):\n",
        "    stotals[i] = np.sum(slist[i])\n",
        "  topindex = np.argsort(stotals)[0]\n",
        "  print(\"Top score = {0}\".format(stotals[topindex]))\n",
        "  print(arpabets[i])\n",
        "  n = 0\n",
        "  for a in product(*arpabets[i]):\n",
        "    #print(a)\n",
        "    if n == topindex:\n",
        "      alist.append(a)\n",
        "      break\n",
        "    n += 1\n",
        "  trylist = []\n",
        "  print(len(slist))\n",
        "  for s in decoder.decode_sentence(alist[0], 12):\n",
        "    print(s)\n"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Arpabets[0]: [['AE'], ['N'], ['D'], ['W'], ['AH', 'T', 'EH', 'AW'], ['N', 'IH', 'T', 'R', 'DH'], ['AH', 'IH', 'T'], ['AH', 'S', 'L', 'Z', 'CH'], ['N', 'IH', 'D', 'L', 'M', 'IY', 'K'], ['N', 'S', 'Z', 'M', 'V', 'AY'], ['AH', 'R', 'DH', 'AE', 'Z'], ['AH', 'N', 'IH', 'T', 'D', 'AE', 'Z'], ['AH', 'N', 'IH', 'D', 'Z'], ['AH', 'N', 'IH', 'T', 'L', 'DH', 'AE', 'F'], ['N', 'IH', 'D', 'L', 'M', 'AO', 'EY'], ['AH', 'T', 'DH', 'Z', 'M', 'EY'], ['AH', 'N', 'IH', 'T', 'L', 'AE', 'Z', 'G'], ['IH', 'T', 'D', 'DH', 'AE', 'Z', 'M'], ['AH', 'N', 'IH', 'D', 'AE', 'IY', 'W'], ['AH', 'N', 'IH', 'D', 'Z', 'W', 'CH'], ['N', 'IH', 'T', 'Z'], ['AH', 'N', 'DH', 'AE', 'Z', 'M', 'AY'], ['AH', 'N', 'IH', 'T', 'D', 'M', 'W'], ['AH', 'R', 'L', 'AE', 'Z', 'M', 'IY', 'AY'], ['.', 'N', 'Z', 'M', 'IY', 'F', 'EY'], ['.', 'N', 'IH', 'D', 'AE', 'F'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.']]\n",
            "Scores[0]: [[0.86064494], [0.90886354], [0.89171857], [0.74973166], [0.25321367, 0.054569084, 0.3572582, 0.063113585], [0.2105292, 0.07541481, 0.17097163, 0.06652242, 0.20616019], [0.11549969, 0.28801423, 0.17013513], [0.10719807, 0.07140977, 0.10478793, 0.07163476, 0.27817166], [0.0976023, 0.10265439, 0.05121697, 0.050838258, 0.06865805, 0.062264536, 0.08134177], [0.108046524, 0.05385654, 0.12860043, 0.06659383, 0.061137855, 0.06146687], [0.087737545, 0.073496714, 0.081853926, 0.12259767, 0.16449], [0.13704717, 0.24316475, 0.06972309, 0.056226734, 0.07058293, 0.06449851, 0.05463916], [0.13112713, 0.0872598, 0.07819519, 0.15098844, 0.05807027], [0.0635746, 0.057440788, 0.08009664, 0.05415244, 0.055557974, 0.053596668, 0.06343533, 0.057781853], [0.06636559, 0.07199584, 0.05261914, 0.096652865, 0.08074078, 0.0504304, 0.052987177], [0.07499057, 0.10074745, 0.10024791, 0.06771785, 0.13379802, 0.10731447], [0.06590498, 0.05093557, 0.075687476, 0.080341294, 0.11171491, 0.08633909, 0.08777006, 0.055770047], [0.05599046, 0.055222053, 0.067370035, 0.10869777, 0.1628943, 0.057407714, 0.057534814], [0.083546795, 0.13986856, 0.120398715, 0.115991905, 0.05622771, 0.05755229, 0.10434986], [0.098272316, 0.13865304, 0.052550543, 0.12860519, 0.06779208, 0.055030633, 0.067149356], [0.054307286, 0.09782207, 0.18568365, 0.054595884], [0.10295284, 0.085663356, 0.11711876, 0.09453848, 0.0709884, 0.052313376, 0.069940194], [0.071792535, 0.060702294, 0.083369896, 0.09518563, 0.0884072, 0.07236306, 0.07818647], [0.08392188, 0.058553003, 0.053596687, 0.053123876, 0.08390041, 0.06398394, 0.051898137, 0.07131541], [0.060083613, 0.06399792, 0.054954235, 0.059138004, 0.054574616, 0.10521268, 0.09593506], [0.2131753, 0.078604855, 0.055605132, 0.056422092, 0.053432398, 0.11958949], [0.58620614], [0.80802524], [0.9167293], [0.94792724], [0.9959145], [0.9992704], [0.9999368], [0.99995077], [0.9999999], [1.0], [1.0], [1.0], [1.0], [1.0]]\n",
            "[[0.1724905, 0.1594459, 0.080528975, 0.5220526], [0.1382865, 0.058823727, 0.052516904, 0.07134519, 0.35118538, 0.16524878], [0.53892064, 0.059347972], [0.07059432, 0.15134504, 0.051295567, 0.078357235, 0.078800164, 0.0621812], [0.063337326, 0.06726396, 0.056026388, 0.052263718, 0.05271245, 0.07663296, 0.054735947], [0.14274856, 0.09004946, 0.055151388, 0.061975062, 0.059110295, 0.08270831, 0.07283606], [0.14579973, 0.09075643, 0.07116041, 0.1274195, 0.0810228], [0.08709616, 0.12989123, 0.05431734, 0.05686919, 0.05962165, 0.051708404, 0.077213995, 0.06304648], [0.050274655, 0.110870354, 0.064585716, 0.062717766, 0.0664518, 0.05485265, 0.05453415, 0.08988468], [0.072381385, 0.075443454, 0.05850794, 0.07498433, 0.15036036, 0.050973266, 0.054923974], [0.2425611, 0.059470676, 0.06810974, 0.050846003], [0.12728836, 0.15838948, 0.16115795, 0.057375733], [0.14113866, 0.07255251, 0.07871117, 0.07119501, 0.06306841, 0.06633495, 0.05099998], [0.05377084, 0.051783454, 0.06611771, 0.050676227, 0.082514435, 0.05015158, 0.07316006], [0.109545045, 0.1097706, 0.07397067, 0.055415362, 0.082870185, 0.06078038], [0.06800361, 0.064255305, 0.07297126, 0.07083546, 0.050015755, 0.08542772, 0.053887203], [0.15129489, 0.05264226, 0.06404162, 0.06269263, 0.056980554, 0.050617978], [0.08892648, 0.11261441, 0.05570807, 0.074618064, 0.062909015, 0.123907246, 0.058840137, 0.061676767], [0.14527133, 0.06829836, 0.06887652, 0.058994565, 0.07159646, 0.09751565], [0.14657322, 0.086704046, 0.06605869, 0.07106401, 0.060872078], [0.16361152, 0.067629494, 0.059084076, 0.058232736, 0.16698903], [0.09682271, 0.064613186, 0.07249376, 0.0983201, 0.07184197, 0.07628602], [0.1350939, 0.0672476, 0.07775781, 0.060074598, 0.0639345, 0.075805254], [0.14052764, 0.055100013, 0.051429987, 0.066263355, 0.08637916, 0.060207147], [0.08821917, 0.06778907, 0.065762, 0.053813692, 0.098114654, 0.0836126, 0.060572904], [0.104509935, 0.14682086, 0.061126303, 0.06981323, 0.06562808, 0.064186774], [0.2526425, 0.13498262, 0.07139187, 0.067630954, 0.071326494, 0.06233861], [0.5986344, 0.059501264], [0.780682], [0.915946], [0.9388864], [0.9811398], [0.9965591], [0.99909735], [0.9999974], [0.9999871], [1.0], [1.0], [1.0], [1.0]]\n",
            "Top score = 15.948659896850586\n",
            "[['AH', 'T', 'DH', 'F'], ['AH', 'R', 'M', 'V', 'AO', 'UW'], ['R', 'S'], ['AH', 'M', 'EH', 'EY', 'AY', 'UW'], ['R', 'S', 'L', 'DH', 'IY', 'EY', 'OW'], ['AH', 'N', 'T', 'Z', 'M', 'ER', 'IY'], ['AH', 'N', 'D', 'R', 'Z'], ['AH', 'N', 'IH', 'D', 'S', 'IY', 'W', 'B'], ['AH', 'N', 'IH', 'T', 'D', 'R', 'DH', 'EH'], ['AH', 'T', 'D', 'S', 'L', 'M', 'AY'], ['AH', 'D', 'S', 'ER'], ['AH', 'N', 'T', 'M'], ['AH', 'N', 'T', 'D', 'R', 'AE', 'V'], ['IH', 'D', 'S', 'L', 'DH', 'IY', 'V'], ['AH', 'D', 'L', 'DH', 'ER', 'AY'], ['AH', 'N', 'IH', 'T', 'D', 'R', 'V'], ['AH', 'N', 'T', 'R', 'S', 'IY'], ['AH', 'N', 'IH', 'T', 'S', 'L', 'DH', 'V'], ['AH', 'N', 'IH', 'D', 'R', 'S'], ['N', 'IH', 'T', 'L', 'Z'], ['AH', 'N', 'T', 'D', 'R'], ['AH', 'N', 'S', 'L', 'EY', 'UW'], ['AH', 'T', 'D', 'R', 'S', 'L'], ['AH', 'N', 'D', 'R', 'L', 'Z'], ['.', 'AH', 'N', 'T', 'L', 'DH', 'UW'], ['.', 'AH', 'N', 'D', 'EY', 'AY'], ['.', 'N', 'D', 'EH', 'EY', 'AY'], ['.', 'S'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.']]\n",
            "1\n",
            "checking ('AH', 'AH', 'R', 'AH', 'R', 'AH', 'AH', 'AH', 'AH', 'AH', 'AH', 'AH', 'AH')\n",
            "['!']\n",
            "[[0.86064494], [0.90886354], [0.89171857], [0.74973166], [0.25321367, 0.054569084, 0.3572582, 0.063113585], [0.2105292, 0.07541481, 0.17097163, 0.06652242, 0.20616019], [0.11549969, 0.28801423, 0.17013513], [0.10719807, 0.07140977, 0.10478793, 0.07163476, 0.27817166], [0.0976023, 0.10265439, 0.05121697, 0.050838258, 0.06865805, 0.062264536, 0.08134177], [0.108046524, 0.05385654, 0.12860043, 0.06659383, 0.061137855, 0.06146687], [0.087737545, 0.073496714, 0.081853926, 0.12259767, 0.16449], [0.13704717, 0.24316475, 0.06972309, 0.056226734, 0.07058293, 0.06449851, 0.05463916], [0.13112713, 0.0872598, 0.07819519, 0.15098844, 0.05807027], [0.0635746, 0.057440788, 0.08009664, 0.05415244, 0.055557974, 0.053596668, 0.06343533, 0.057781853], [0.06636559, 0.07199584, 0.05261914, 0.096652865, 0.08074078, 0.0504304, 0.052987177], [0.07499057, 0.10074745, 0.10024791, 0.06771785, 0.13379802, 0.10731447], [0.06590498, 0.05093557, 0.075687476, 0.080341294, 0.11171491, 0.08633909, 0.08777006, 0.055770047], [0.05599046, 0.055222053, 0.067370035, 0.10869777, 0.1628943, 0.057407714, 0.057534814], [0.083546795, 0.13986856, 0.120398715, 0.115991905, 0.05622771, 0.05755229, 0.10434986], [0.098272316, 0.13865304, 0.052550543, 0.12860519, 0.06779208, 0.055030633, 0.067149356], [0.054307286, 0.09782207, 0.18568365, 0.054595884], [0.10295284, 0.085663356, 0.11711876, 0.09453848, 0.0709884, 0.052313376, 0.069940194], [0.071792535, 0.060702294, 0.083369896, 0.09518563, 0.0884072, 0.07236306, 0.07818647], [0.08392188, 0.058553003, 0.053596687, 0.053123876, 0.08390041, 0.06398394, 0.051898137, 0.07131541], [0.060083613, 0.06399792, 0.054954235, 0.059138004, 0.054574616, 0.10521268, 0.09593506], [0.2131753, 0.078604855, 0.055605132, 0.056422092, 0.053432398, 0.11958949], [0.58620614], [0.80802524], [0.9167293], [0.94792724], [0.9959145], [0.9992704], [0.9999368], [0.99995077], [0.9999999], [1.0], [1.0], [1.0], [1.0], [1.0]]\n",
            "Top score = 19.00779914855957\n",
            "[['AH', 'T', 'DH', 'F'], ['AH', 'R', 'M', 'V', 'AO', 'UW'], ['R', 'S'], ['AH', 'M', 'EH', 'EY', 'AY', 'UW'], ['R', 'S', 'L', 'DH', 'IY', 'EY', 'OW'], ['AH', 'N', 'T', 'Z', 'M', 'ER', 'IY'], ['AH', 'N', 'D', 'R', 'Z'], ['AH', 'N', 'IH', 'D', 'S', 'IY', 'W', 'B'], ['AH', 'N', 'IH', 'T', 'D', 'R', 'DH', 'EH'], ['AH', 'T', 'D', 'S', 'L', 'M', 'AY'], ['AH', 'D', 'S', 'ER'], ['AH', 'N', 'T', 'M'], ['AH', 'N', 'T', 'D', 'R', 'AE', 'V'], ['IH', 'D', 'S', 'L', 'DH', 'IY', 'V'], ['AH', 'D', 'L', 'DH', 'ER', 'AY'], ['AH', 'N', 'IH', 'T', 'D', 'R', 'V'], ['AH', 'N', 'T', 'R', 'S', 'IY'], ['AH', 'N', 'IH', 'T', 'S', 'L', 'DH', 'V'], ['AH', 'N', 'IH', 'D', 'R', 'S'], ['N', 'IH', 'T', 'L', 'Z'], ['AH', 'N', 'T', 'D', 'R'], ['AH', 'N', 'S', 'L', 'EY', 'UW'], ['AH', 'T', 'D', 'R', 'S', 'L'], ['AH', 'N', 'D', 'R', 'L', 'Z'], ['.', 'AH', 'N', 'T', 'L', 'DH', 'UW'], ['.', 'AH', 'N', 'D', 'EY', 'AY'], ['.', 'N', 'D', 'EH', 'EY', 'AY'], ['.', 'S'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.'], ['.']]\n",
            "1\n",
            "checking ('AH', 'AH', 'R', 'AH', 'R', 'AH', 'AH', 'AH', 'AH', 'AH', 'AH', 'AH', 'AH')\n",
            "['!']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "yyDGVtigW57f",
        "outputId": "1745ccc5-1f57-4cad-8e00-313408b03eef",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 231
        }
      },
      "cell_type": "code",
      "source": [
        "categories = df_train.label.cat.categories.tolist()\n",
        "predict_logits = predicts.argmax(axis=1)\n",
        "print(\"Categorie: {0}\".format(categories))\n",
        "predict_labels = [categories[logit] for logit in predict_logits]\n",
        "predict_labels"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-19-7f6e6bf5580f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcategories\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcategories\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mpredict_logits\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpredicts\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Categorie: {0}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcategories\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mpredict_labels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mcategories\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlogit\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mlogit\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpredict_logits\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mpredict_labels\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'df_train' is not defined"
          ]
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "hYhmukbSKpnp",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "\n",
        "os.remove('./model.h5')"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}